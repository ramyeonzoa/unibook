spring:
  application:
    name: unibook
  profiles:
    active: local  # Default to local profile
  threads:
    virtual:
      enabled: true
  datasource:
    url: jdbc:mysql://localhost:3306/unibook_db?useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8
    username: root
    password: ${DB_PASSWORD:}  # Empty default, actual password in application-local.yml
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update  # Update schema without dropping data
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.MySQL8Dialect
  thymeleaf:
    cache: false  # Development mode
    prefix: classpath:/templates/
    suffix: .html
  devtools:
    restart:
      enabled: true
    livereload:
      enabled: true
  cache:
    type: simple  # 개발 환경에서는 simple, 운영에서는 redis 등 사용
    cache-names:
      - schools
      - schoolSearch
      - bookSearch
  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 50MB  # 여러 파일 업로드 시 전체 요청 크기
      file-size-threshold: 2KB  # 메모리에 저장할 임계값
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME:}  # Gmail 주소 (application-local.yml에 설정)
    password: ${MAIL_PASSWORD:}  # 앱 비밀번호 (application-local.yml에 설정)
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          timeout: 5000
          connectiontimeout: 5000
          writetimeout: 5000
    default-encoding: UTF-8

server:
  port: 8080

logging:
  level:
    com.unibook: DEBUG # WARN # INFO  # 기본값은 INFO
    org.springframework.web: WARN # INFO

# Application specific settings
app:
  home:
    popular-books-limit: 8
    recent-posts-limit: 8
  file:
    upload-dir: uploads/
    max-size: 10485760  # 10MB in bytes
    allowed-extensions: jpg,jpeg,png,gif,webp
  pagination:
    default-page-size: 20
    max-page-size: 100
  post-images:
    path: uploads/posts/
    max-count: 5  # 게시글당 최대 이미지 수
  email:
    verification:
      expiration-hours: 1  # 이메일 인증 토큰 유효 시간 (1시간)
      base-url: http://localhost:8080  # 프로덕션에서는 실제 도메인으로 변경
    password-reset:
      expiration-hours: 1  # 비밀번호 재설정 토큰 유효 시간 (1시간)

# Naver API configuration
naver:
  api:
    client-id: ${NAVER_CLIENT_ID:your-client-id}  # application-local.yml에 실제 값 설정
    client-secret: ${NAVER_CLIENT_SECRET:your-client-secret}  # application-local.yml에 실제 값 설정
    book-search-url: https://openapi.naver.com/v1/search/book.json

# OpenAI API configuration (RAG Chatbot)
openai:
  api:
    key: ${OPENAI_API_KEY:your-openai-api-key}  # application-local.yml에 실제 값 설정
    model: gpt-5-nano  # GPT-5-nano 모델 사용
    embedding-model: text-embedding-3-small  # 임베딩 모델
    max-tokens: 4096  # 최대 응답 길이
    timeout: 30  # API 타임아웃 (초)